import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class tryPlagerism {
    public static void main(String[] args) {
        JFrame frame = new JFrame("Plagiarism Remover");
        frame.setSize(800, 600);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        JMenuBar menuBar = new JMenuBar();
        JMenu fileMenu = new JMenu("File");
        JMenuItem openItem = new JMenuItem("Open");
        JMenuItem createItem = new JMenuItem("Create");
        JMenuItem saveItem = new JMenuItem("Save");
        JMenuItem exitItem = new JMenuItem("Exit");

        fileMenu.add(openItem);
        fileMenu.add(createItem);
        fileMenu.add(saveItem);
        fileMenu.add(exitItem);
        menuBar.add(fileMenu);

        frame.setJMenuBar(menuBar);

        JTextArea inputArea = new JTextArea();
        JTextArea outputArea = new JTextArea();
        inputArea.setLineWrap(true);
        inputArea.setWrapStyleWord(true);
        outputArea.setEditable(false);
        outputArea.setLineWrap(true);
        outputArea.setWrapStyleWord(true);

        JScrollPane inputScrollPane = new JScrollPane(inputArea);
        JScrollPane outputScrollPane = new JScrollPane(outputArea);

        JButton processButton = new JButton("Remove Plagiarism");
        JButton checkButton = new JButton("Check Plagiarism");
        JButton humanizeButton = new JButton("Humanize");
        JButton grammarButton = new JButton("Grammar Correction");

        JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.add(processButton);
        buttonPanel.add(checkButton);
        buttonPanel.add(humanizeButton);
        buttonPanel.add(grammarButton);

        frame.setLayout(new BorderLayout());
        frame.add(inputScrollPane, BorderLayout.CENTER);
        frame.add(buttonPanel, BorderLayout.NORTH);
        frame.add(outputScrollPane, BorderLayout.SOUTH);

        openItem.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            if (fileChooser.showOpenDialog(frame) == JFileChooser.APPROVE_OPTION) {
                try (BufferedReader reader = new BufferedReader(new FileReader(fileChooser.getSelectedFile()))) {
                    inputArea.read(reader, null);
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(frame, "Error opening file.");
                }
            }
        });

        createItem.addActionListener(e -> inputArea.setText(""));

        saveItem.addActionListener(e -> {
            JFileChooser fileChooser = new JFileChooser();
            if (fileChooser.showSaveDialog(frame) == JFileChooser.APPROVE_OPTION) {
                try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileChooser.getSelectedFile()))) {
                    writer.write(outputArea.getText());
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(frame, "Error saving file.");
                }
            }
        });

        exitItem.addActionListener(e -> System.exit(0));

        processButton.addActionListener(e -> outputArea.setText(removePlagiarism(inputArea.getText())));
        checkButton.addActionListener(e -> outputArea.setText("Plagiarism check functionality coming soon..."));
        humanizeButton.addActionListener(e -> outputArea.setText("Humanization functionality coming soon..."));
        grammarButton.addActionListener(e -> outputArea.setText("Grammar correction functionality coming soon..."));

        frame.setVisible(true);
    }

    public static String removePlagiarism(String text) {
        Map<String, String> synonyms = new HashMap<>();
        synonyms.put("check", "verify");
        synonyms.put("plagiarism", "duplication");
        synonyms.put("submitted", "provided");
        synonyms.put("text", "content");
        synonyms.put("identify", "detect");
        synonyms.put("highlight", "emphasize");
        synonyms.put("sections", "parts");
        synonyms.put("database", "repository");
        synonyms.put("similarity", "likeness");
        synonyms.put("content", "material");
        synonyms.put("algorithm", "process");

        String[] words = text.split("\\s+");
        StringBuilder rewrittenText = new StringBuilder();

        for (String word : words) {
            String cleanedWord = word.toLowerCase().replaceAll("[^a-zA-Z]", "");
            String punctuation = word.replaceAll("[a-zA-Z]", "");
            rewrittenText.append(synonyms.getOrDefault(cleanedWord, cleanedWord)).append(punctuation).append(" ");
        }

        return rewrittenText.toString().trim();
    }
}
